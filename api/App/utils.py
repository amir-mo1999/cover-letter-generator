import base64
from PyPDF2 import PdfReader
from io import BytesIO
from openai import AsyncOpenAI
import os
from .scraper import Scraper
from .models import CoverLetter
from jinja2 import Environment, FileSystemLoader
import re


def extract_text_from_pdf_base64(base64_string: str) -> str:
    """
    Extract text from a PDF file encoded in a base64 string.

    Parameters:
    base64_string (str): The base64 encoded string representing the PDF file.

    Returns:
    str: The extracted text from the PDF.
    """

    # Decode the base64 string
    pdf_data = base64.b64decode(base64_string)

    # Create a BytesIO object from the decoded data
    pdf_file = BytesIO(pdf_data)

    # Read the PDF file using PyPDF2
    reader = PdfReader(pdf_file)

    # Extract text from each page of the PDF
    extracted_text = ""
    for page_num in range(len(reader.pages)):
        page = reader.pages[page_num]
        extracted_text += page.extract_text()

    return extracted_text


async def generate_cover_letter(job_listing: str, resume: str) -> CoverLetter:
    """Generates a cover letter based on a given job listing and resume.

    Args:
        job_listing (str): job listing
        resume (str): resume

    Returns:
        str: cover letter generated by gpt-4-turbo
    """
    # open ai async client
    client = AsyncOpenAI()

    environment = Environment(loader=FileSystemLoader(os.path.join("App", "prompts")))
    # job listing prompt
    structure_job_listing_template = environment.get_template(
        "structure_job_listing.txt"
    )
    structure_job_listing_prompt = structure_job_listing_template.render(
        job_listing=job_listing
    )

    # resume prompt
    structure_resume_template = environment.get_template("structure_resume.txt")
    structure_resume_prompt = structure_resume_template.render(resume=resume)

    ## process the job listing
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "user", "content": structure_job_listing_prompt},
        ],
    )
    job_listing = response.choices[0].message.content

    # get first lines of listing
    first_lines = job_listing.split("\n")[:6]
    first_lines = "".join(first_lines)

    # get job title
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {
                "role": "user",
                "content": f"Extract the job title from this string: {first_lines}",
            },
            {
                "role": "user",
                "content": "Only output the job title and nothing else",
            },
        ],
    )
    job_title = response.choices[0].message.content.strip()

    # get company name
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {
                "role": "user",
                "content": f"Extract the company name without its legal form from this string: {first_lines}",
            },
            {
                "role": "user",
                "content": "Only output the company name and nothing else",
            },
        ],
    )
    company = response.choices[0].message.content.strip()

    ## process the resume
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "user", "content": structure_resume_prompt},
        ],
    )
    resume = response.choices[0].message.content

    # cover letter prompt
    generate_cover_letter_template = environment.get_or_select_template(
        "generate_cover_letter.txt"
    )
    generate_cover_letter_prompt = generate_cover_letter_template.render(
        resume=resume, job_listing=job_listing
    )

    ## generate the cover letter
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "assistant", "content": job_listing},
            {
                "role": "user",
                "content": generate_cover_letter_prompt,
            },
        ],
    )
    cover_letter = response.choices[0].message.content

    cover_letter = CoverLetter(
        cover_letter=cover_letter, company=company, job_title=job_title
    )
    return cover_letter


def is_base64(string):
    try:
        decoded = base64.b64decode(string, validate=True)

        if base64.b64encode(decoded).decode("utf-8") == string:
            return True
        else:
            return False
    except Exception:
        return False


def scrape_job_listing(url):
    scraper = Scraper(disable_javascript=True)
    pdf = scraper.print_to_pdf(url)
    text = extract_text_from_pdf_base64(pdf)
    return text
